<!-- The MIT License (MIT)

Copyright ( c ) 2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<!--/**
      * @class dr.text {UI Components}
      * @extends dr.view
      * Text component that supports single and multi-line text.
      * 
      *  The text component can be fixed size, or sized to fit the size of the text.
      * 
      *      @example
      *      <text text="Hello World!" bgcolor="red"></text>
      * 
      *  Here is a multiline text
      * 
      *      @example
      *      <text multiline="true" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit"></text>
      * 
      *  You might want to set the value of a text element based on the value of other attributes via a constraint. Here we set the value by concatenating three attributes together.
      * 
      *      @example
      *      <attribute name="firstName" type="string" value="Lumpy"></attribute>
      *      <attribute name="middleName" type="string" value="Space"></attribute>
      *      <attribute name="lastName" type="string" value="Princess"></attribute>
      * 
      *      <text text="${this.parent.firstName + ' ' + this.parent.middleName + ' ' + this.parent.lastName}" color="hotpink"></text>
      * 
      *  Constraints can contain more complex JavaScript code
      * 
      *      @example
      *      <attribute name="firstName" type="string" value="Lumpy"></attribute>
      *      <attribute name="middleName" type="string" value="Space"></attribute>
      *      <attribute name="lastName" type="string" value="Princess"></attribute>
      * 
      *      <text text="${this.parent.firstName.charAt(0) + ' ' + this.parent.middleName.charAt(0) + ' ' + this.parent.lastName.charAt(0)}" color="hotpink"></text>
      * 
      *  We can simplify this by using a method to return the concatenation and constraining the text value to the return value of the method
      * 
      *      @example
      *      <attribute name="firstName" type="string" value="Lumpy"></attribute>
      *      <attribute name="middleName" type="string" value="Space"></attribute>
      *      <attribute name="lastName" type="string" value="Princess"></attribute>
      * 
      *      <method name="initials">
      *        return this.firstName.charAt(0) + ' ' + this.middleName.charAt(0) + ' ' + this.lastName.charAt(0);
      *      </method>
      * 
      *      <text text="${this.parent.initials()}" color="hotpink"></text>
      * 
      *  You can override the format method to provide custom formatting for text elements. Here is a subclass of text, timetext, with the format method overridden to convert the text given in seconds into a formatted string.
      * 
      *      @example
      *      <class name="timetext" extends="text">
      *        <method name="format" args="seconds">
      *          var minutes = Math.floor(seconds / 60);
      *          var seconds = Math.floor(seconds) - minutes * 60;
      *          if (seconds < 10) {
      *            seconds = '0' + seconds;
      *          }
      *          return minutes + ':' + seconds;
      *        </method>
      *      </class>
      * 
      *      <timetext text="240"></timetext>
      * 
      */-->
<class name="text" type="coffee" bgcolor="rgb(63,63,63)" color="white" font-weight="200">
  <!--/**
        * @attribute {Number} [fontsize]
        * The size of the font in pixels.
        */-->
  <attribute name="fontsize" type="number" value="20"></attribute>

  <!--/**
        * @attribute {Number} [fontfamily=""]
        * The name of the font family to use, e.g. "Helvetica"  Include multiple fonts on a line, separated by commas.
        */-->
  <attribute name="fontfamily" type="string" value="'mission-gothic', 'Helvetica Neue', Helvetica, Arial, sans-serif"></attribute>

  <!--/**
        * @attribute {Boolean} [bold=false]
        * Use bold text.
        */-->
  <attribute name="bold" type="boolean" value="false"></attribute>
  <setter name="bold" args="bold">
    @sprite.setStyle('font-weight', `bold ? 'bold' : '200'`)
    return bold
  </setter>

  <!--/**
        * @attribute {Boolean} [italic=false]
        * Use italic text.
        */-->
  <attribute name="italic" type="boolean" value="false"></attribute>
  <setter name="italic" args="italic">
    @sprite.setStyle('font-style', `italic ? 'italic' : undefined`)
    return italic
  </setter>

  <!--/**
        * @attribute {Boolean} [smallcaps=false]
        * Use small caps style.
        */-->
  <attribute name="smallcaps" type="boolean" value="false"></attribute>
  <setter name="smallcaps" args="caps">
    @sprite.setStyle('font-variant', `caps ? 'small-caps' : undefined`)
    return caps
  </setter>

  <!--/**
        * @attribute {Boolean} [underline=false]
        * Draw and underline under text (note, is incompatible with dr.text#strike)
        */-->
  <attribute name="underline" type="boolean" value="false"></attribute>
  <setter name="underline" args="underline">
    @defaultSetAttributeBehavior('underline', underline)
    if underline
      if @strike then @setAttribute('strike', false)
      @sprite.setStyle('text-decoration', 'underline')
    else if not @strike
      @sprite.setStyle('text-decoration', undefined)
    return dr._noop
  </setter>

  <!--/**
        * @attribute {Boolean} [strike=false]
        * Draw and strike-through the text (note, is incompatible with dr.text#underline)
        */-->
  <attribute name="strike" type="boolean" value="false"></attribute>
  <setter name="strike" args="strike">
    @defaultSetAttributeBehavior('strike', strike)
    if strike
      if @underline then @setAttribute('underline', false)
      @sprite.setStyle('text-decoration', 'line-through')
    else if not @underline
      @sprite.setStyle('text-decoration', undefined)
    return dr._noop
  </setter>

  <!--/**
        * @attribute {Boolean} [multiline=false]
        * Set to true to show multi-line text.
        */-->
  <attribute name="multiline" type="boolean" value="false"></attribute>

  <!--/**
        * @attribute {Boolean} [resize=true]
        * By default, the text component is sized to the size of the text.
        * By setting resize=false, the component size is not modified
        * when the text changes.
        */-->
  <attribute name="resize" type="boolean" value="true"></attribute>
  <setter name="resize" args="value">
    if value
      @setAttribute("leftpadding", @leftpadding || 20)
      @setAttribute("rightpadding", @rightpadding || 20)
      @setAttribute("toppadding", @toppadding || 10)
      @setAttribute("bottompadding", @bottompadding || 10)
    else
      @setAttribute("padding", 0)
    return value
  </setter>

  <attribute name="text" type="string" value=""></attribute>
  <!--/**
        * @attribute {String} [text=""]
        * The contents of this input text field
        */-->
  <setter name="text" args="text">
    if text isnt @text
      @sprite.setText(@format(text))
      @updateSize()
    return text
  </setter>

  <setter name="data" args="data">
    @setAttribute('text', data, true)
    return data
  </setter>

  <method name="construct" args="el, attributes">
    @super()
    if 'width' of attributes then @_initialwidth = attributes.width
  </method>

  <method name="_createSprite" args="el, attributes">
    @super()
    # so the text attribute has a value when the text is set between the tags
    attributes.text ||= @sprite.getText(true)
    @sprite.createTextElement()
  </method>

  <handler event="oninit" method="updateSize"></handler>
  <handler event="onmultiline" method="updateSize"></handler>
  <handler event="onresize" method="updateSize"></handler>

  <!--/**
        * @method format
        * Format the text to be displayed. The default behavior is to
        * return the text intact. Override to change formatting. This method
        * is called whenever the text attribute is set.
        * @param {String} str The current value of the text component.
        * @return {String} The formated string to display in the component.
        */-->
  <method name="format" args="str">
    return str
  </method>

  <method name="updateSize">
    return unless @inited
    return unless @resize
    
    width = if @multiline then @_initialwidth else @width
    size = @sprite.measureTextSize(@multiline, width, @resize)

    @setAttribute('width', size.width, true) if size.width != @width
    @setAttribute('height', size.height, true) if size.height != @height
  </method>
</class>
