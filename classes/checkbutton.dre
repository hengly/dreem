<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->

  <!--/**
     * @class dr.checkbutton {UI Components}
     * @extends dr.buttonbase
     * Button class consisting of text and a visual element to show the
     * current state of the component. The state of the
     * button changes each time the button is clicked. The select property
     * holds the current state of the button. The onselected event
     * is generated when the button is the selected state.
     *
     *     @example
     *     <spacedlayout axis="y"></spacedlayout>
     *
     *     <checkbutton text="pink" selectcolor="pink" defaultcolor="lightgrey" bgcolor="white"></checkbutton>
     *     <checkbutton text="blue" selectcolor="lightblue" defaultcolor="lightgrey" bgcolor="white"></checkbutton>
     *     <checkbutton text="green" selectcolor="lightgreen" defaultcolor="lightgrey" bgcolor="white"></checkbutton>
     *
     * Here we listen for the onselected event on a checkbox and print the value that is passed to the handler.
     *
     *     @example
     *     <spacedlayout axis="y"></spacedlayout>
     *
     *     <checkbutton text="green" selectcolor="lightgreen" defaultcolor="lightgrey" bgcolor="white">
     *       <handler event="onselected" args="value">
     *         displayselected.setAttribute('text', value);
     *       </handler>
     *     </checkbutton>
     *
     *     <view>
     *       <spacedlayout></spacedlayout>
     *       <text text="Selected:"></text>
     *       <text id="displayselected"></text>
     *     </view>
     *
     */-->
    <class name="checkbutton" type="coffee" extends="buttonbase" defaultcolor="transparent" defaulttextcolor="rgb(140,140,140)">

      <!-- check_x, check_y: Location of check box with button -->
      <!-- check_w, check_h: Size of check box with button -->
      <attribute name="checkx" type="number" value="0"></attribute>
      <attribute name="checky" type="number" value="0"></attribute>
      <attribute name="checkw" type="number" value="0"></attribute>
      <attribute name="checkh" type="number" value="0"></attribute>
      <attribute name="bgcolor" type="string" value="transparent"></attribute>
      <attribute name="innerspacing" type="number" value="3"></attribute>

      <!-- check: Show button state -->
      <art name="check" clickable="false" src="/smoke/triangle.svg" x="${this.parent.checkx}" y="${this.parent.checky}" width="${this.parent.checkw}" height="${this.parent.checkh}"></art>

      <method name="visualize">
        @super()

        if @label.text.length == 0
          @label.setAttribute('visible', false)
        else
          @label.setAttribute('visible', true)

        if @selected
          @check.setAttribute('fill', @selectcolor)
          @label.setAttribute('color', @selectcolor)
        else
          @check.setAttribute('fill', @defaulttextcolor)
          @label.setAttribute('color', @defaulttextcolor)


      </method>

      <handler event="oninit">
        # visual is the object that makes a visual change when selected
        @visual = @check

        @handleResize()

        @visualize()
      </handler>

      <method name="handleResize">
        @super()
        return if @_resize_lock

        checkx = checky = 0
        checkw = checkh = @label.height
        textx = texty = 0
        width = @width
        height = @height

        if @_fixedwidth
          xoffset = (@innerwidth - @label.width - @checkw)/2
          checkx = xoffset
          textx = checkx + checkw + @innerspacing
        else
          width = @checkw + (@border+@padding)*2
          if @label.visible
            width += @label.width + @innerspacing
        textx = checkx + @checkw + @innerspacing

        if @_fixedheight
          yoffset = (@innerheight - @label.height)/2
          checky = yoffset
          texty = yoffset
        else
          height= @label.height + (@border+@padding)*2

        @_resize_lock = true

        settings = {checkx: checkx, checky: checky, checkw: checkw, checkh: checkh, width: width, height: height, textx: textx, texty: texty}
        @setAttributes(settings)

        @_resize_lock = false
      </method>

      <handler event="onclick">
        @setAttribute('selected', !@selected);
      </handler>

    </class>
