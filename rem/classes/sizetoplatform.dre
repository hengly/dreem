<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<!--/**
      * @class dr.sizetoplatform {UI Components}
      * Enables a view to size itself to the platform object it contains. This
      * is a reversal of the standard relationship where the "model" pushes
      * changes into the platform object.
      * 
      * If you set an explicit width or height sizing to the platform object
      * will be suspended for that axis. If later you want to restore the size 
      * to platform object behavior set the width or height to a value 
      * of 'auto'.
      *
      * If you make a modification to the platform object through a mechanism 
      * that results in a change to the size of the platform object you will 
      * need to call the sizeToPlatform method to trigger an update of 
      * the width and height of the view.
      * 
      */-->
<mixin name="sizetoplatform" type="coffee" width="auto" height="auto">
  <!-- Border changes the size of the platform object so do 
       a sizeToPlatform. -->
  <setter name="topborder" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="bottomborder" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="leftborder" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="rightborder" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <!-- Padding changes the size of the platform object so do 
       a sizeToPlatform. -->
  <setter name="toppadding" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="bottompadding" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="leftpadding" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="rightpadding" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="width" args="v">
    if not @__internalUpdate
      if v is 'auto'
        @__hasSetWidth = false
        @sprite.set_width('auto')
        if @inited then @sizeToPlatform()
        return
      else
        @__hasSetWidth = true
    return @super()
  </setter>

  <setter name="height" args="v">
    if not @__internalUpdate
      if v is 'auto'
        @__hasSetHeight = false
        @sprite.set_height('auto')
        if @inited then @sizeToPlatform()
        return
      else
        @__hasSetHeight = true
    return @super()
  </setter>

  <method name="initNode" args="parent, attrs">
    @super()
    
    # For some reason replication creates views without sprites.
    # See pivotal #88868214
    return unless @sprite
    
    # Makes initial border and padding work
    @sprite.set_width('auto') if @width is @__fullBorderPaddingWidth
    @sprite.set_height('auto') if @height is @__fullBorderPaddingHeight
    
    @sizeToPlatform()
  </method>

  <!--/**
    * @method sizeToPlatform
    * Sizes this view to the current size of the DOM elements within it.
    * @returns {void}
    */-->
  <method name="sizeToPlatform">
    bounds = @sprite.getBounds()
    
    @__internalUpdate = true
    unless @__hasSetWidth then @setSimpleActual('width', bounds.width, true) # Avoid dom update
    unless @__hasSetHeight then @setSimpleActual('height', bounds.height, true) # Avoid dom update
    @__internalUpdate = false
  </method>
  
  <method name="__setupAutoConstraint" args="name, value, axis">
    if value is 'auto'
      value
    else
      @super()
  </method>
</mixin>
