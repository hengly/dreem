var Batch = require('batch');
//var pool = require('objectpool');
var memwatch = require('memwatch');
var limit = 100;

memwatch.on('leak', function (info) {
  console.log(info);
});


var roomsList = new FreeList('rooms', 1, function (name) {
  return new Rooms(name);
});


function Roomy(spark) {
  this.write = function () {
    for (var i = 0; i < limit; i++) {
      send();
    }
  }
}

function Primus() {
  this._rooms = new Rooms();
}

function Spark(primus) {
  this.primus = primus;
  //this.rooms = new Rooms(this);
}

Spark.prototype.room = function (rooms, key) {
  if ('room8' === key) {
    return this.rooms;
  }
  return this.primus._rooms[key](this, rooms);
};

Spark.prototype.write = function () {
  for (var i = 0; i < limit; i++) {
    send();
  }
};

function Rooms(name) {
  this.name = name;
  console.log('HOOOLA');
}

Rooms.prototype.write = function () {
  for (var i = 0; i < limit; i++) {
    send();
  }

  if (this.name === 'room7') {
    roomsList.free(this);
  }
}

Rooms.prototype.room1 = function (spark, rooms) {
  return this;
};

Rooms.prototype.room1 = function (spark, rooms) {
  return {
    write: function () {
      for (var i = 0; i < limit; i++) {
        send();
      }
    }
  }
};

Rooms.prototype.room2 = function (spark, rooms) {
  return {
    write: this.write.bind(this)
  };
};

Rooms.prototype.room3 = function (spark, rooms) {
  return new Rooms()
};

Rooms.prototype.room4 = function (spark, rooms) {
  return spark;
};

Rooms.prototype.room5 = function (spark, rooms) {
  return obj.get(spark)
};

Rooms.prototype.room6 = function (spark, rooms) {
  return {
    write: obj.write.bind(spark)
  };
};

/*Rooms.prototype.room7 = function (spark, rooms) {
  return new Roomy();
};*/


Rooms.prototype.room7 = function (spark, rooms) {
  return roomsList.alloc('room7');
};

var obj = {
  get: function (spark) { obj.spark = spark; return this; },
  write: function () {
    for (var i = 0; i < limit; i++) {
      send();
    }
  }
}

suite('instances', function () {

  set('iterations', 1);

  var primus = new Primus();
  var sparks = [];
  var index = 0;
  var len = 10000;

  before(function () {
    for (var i = 0; i < len; i++) {
      var spark = new Spark(primus);
      //spark.rooms = new Rooms(spark);
      sparks.push(spark);
    }
  });
  
  /*bench('room', function () {
    var spark = new Spark(primus);
    spark.room(['room1', 'room2'], 'room1').write();
  });*/

  /*bench('room2', function () {
    if (index == len) index = 0;
    sparks[index++].room(['room1', 'room2'], 'room2').write();
  });

  bench('room3', function () {
    if (index == len-1) index = 0;
    sparks[index++].room(['room1', 'room2'], 'room3').write();
  });

  bench('room4', function () {
    if (index == len-1) index = 0;
    sparks[index++].room(['room1', 'room2'], 'room4').write();
  });

  bench('room5', function () {
    if (index == len-1) index = 0;
    sparks[index++].room(['room1', 'room2'], 'room5').write();
  });

  bench('room6', function () {
    if (index == len-1) index = 0;
    sparks[index++].room(['room1', 'room2'], 'room6').write();
  });*/

  /*bench('room7', function () {
    if (index == len-1) index = 0;
    sparks[index++].room(['room1', 'room2'], 'room7').write();
  });*/

  /*bench('room8', function () {
    if (index == len-1) index = 0;
    sparks[index++].room(['room1', 'room2'], 'room8').write();
  });*/

  bench('for 1', function () {
    var data = [];
    for (var i = 0, s; s = sparks[i]; i++) {
      data.push(s);
      data.push(s);
      data.push(s);
    }
  });

  bench('for 2', function () {
    var data = [];
    for (var i = 0; i < sparks.length; i++) {
      data.push(sparks[i]);
      data.push(sparks[i]);
      data.push(sparks[i]);
    }
  });

  bench('for 3', function () {
    var data = [];
    var i = 0;
    var l = sparks.length;
    for (; i < l; ++i) {
      var s = sparks[i];
      data.push(s);
      data.push(s);
      data.push(s);
    }
  });

});


function send(fn) {
  return true;
}



function FreeList(name, max, constructor) {
  this.name = name;
  this.constructor = constructor;
  this.max = max;
  this.list = [];
  this.li = null;
};

FreeList.prototype.alloc = function() {
  //debug("alloc " + this.name + " " + this.list.length);
  return this.li ? this.li :
                            this.constructor.apply(this, arguments);
};


FreeList.prototype.free = function(obj) {
  //debug("free " + this.name + " " + this.list.length);
  this.li = obj;
  /*if (this.list.length < this.max) {
    this.list.push(obj);
  }*/
};

